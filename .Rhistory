use_gpl3_license()
#'
#' @import dplyr
#' @import
#' @import
#' @import
#'
#' @return
#' @export
#'
#' @examples
name_be_extract <- function(data_to_detect,
col_to_detect = NULL,
reference = "all",
numb_threshold = 500,
length_threshold = 3,
exclude_dico = NULL,
spec_char_insens = FALSE,
respect_boundaries = TRUE,
nl_street = FALSE) {
# Un stop si la colonne avec le nom n'est pas renseignée
if (is.null(col_to_detect)) {
stop(paste0("\u2716", " Le champ dans lequel d", "\u00e9", "tecter le nom n'a pas ", "\u00e9", "t", "\u00e9", " correctement rempli"))
}
cat(paste0("\n", "--- name_be_extract ---"))
# 1. Préparation des données --------------------------------------------------------------------------------------------------------------
# Fonction utilisee ci-dessous => https://www.r-bloggers.com/2018/07/the-notin-operator/
`%ni%` <- Negate(`%in%`)
cat(paste0("\n", "\u29D7", " Pr", "\u00e9", "paration des donn", "\u00e9", "es"))
# On crée la colonne dans laquelle on doit détecter le prénom (transformée pour le matching)
data_to_detect$col_to_detect <- data_to_detect[[col_to_detect]]
data_to_detect <- data_to_detect %>%
mutate(col_to_detect = str_to_lower(str_trim(col_to_detect)),
ID_detect_unique = row_number()) %>%
relocate(ID_detect_unique)
# On charge les noms
if (reference == "all") {
noms <- read_delim("noms.csv", delim = ";", progress= F,  col_types = cols(.default = col_character())) %>%
filter(str_detect(name_detected, "-") == FALSE) %>%
filter(n_tot >= numb_threshold) %>% # On ne prend que les noms dont la frequence est superieure a numb_threshold
mutate(name_detect_noms = str_to_lower(str_trim(name_detected))) %>%
filter(length >= length_threshold)
}
if (reference == "old") {
noms <- read_delim("noms_65.csv", delim = ";", progress= F,  col_types = cols(.default = col_character())) %>%
filter(str_detect(name_detected, "-") == FALSE) %>%
filter(n_tot >= numb_threshold) %>% # On ne prend que les noms dont la frequence est superieure a numb_threshold
mutate(name_detect_noms = str_to_lower(str_trim(name_detected))) %>%
filter(length >= length_threshold)
}
# On enlève qques prénoms qui sont aussi des noms communs, pour ne pas détecter toutes les rues / institutions avec "Reine Astrid", "Prince bidule", etc.
# ATTENTION : avec spec_char_insens == TRUE, "van" est tout de même sélectionné (car il doit exister une déclinaison avec accent dans les noms => enlever ?)
noms <- noms %>%
filter(name_detect_noms %ni% c("prince",
"reine",
"prins",
"princesse",
"roi",
"de",
"la",
"le",
"des",
"les",
"van",
"vân",
"ten",
"duc",
"roc",
"saint"
))
# On exlut les noms communs si exclude_dico == TRUE
# NOTE : ici il faut faire un travail de sélection du meilleur dictionnaire
if (!is.null(exclude_dico)) {
exclude_dico_computed <- NULL
if (any(exclude_dico %in% "fr")) {
exclude_dico_computed <- append(exclude_dico_computed, c("fr", "fr;nl"))
}
if (any(exclude_dico %in% "nl")) {
exclude_dico_computed <- append(exclude_dico_computed, c("nl", "fr;nl"))
}
exclude_dico_computed <- unique(exclude_dico_computed)
filter_noms_com <- unique(noms$name_detect_noms[noms$dico %in% exclude_dico_computed & !is.na(noms$dico)])
noms <- noms %>%
filter(name_detect_noms %ni% filter_noms_com)
}
# Le tri ici est important pour éviter de sélectionner le plus court au sein de noms potentiellement plus longs (éviter de prendre "Deni" dans "Denise" car "Deni" est avant "Denise" dans la liste des noms)
# Voir ici pour une solution alternative ? => https://stackoverflow.com/questions/50453844/how-to-extract-the-longest-match
noms$length <- as.numeric(noms$length)
noms <- noms[order(noms$length, decreasing = TRUE),]
# Si insensible aux caract. spéciaux : on transforme la détection avec des REGEX
if (spec_char_insens == TRUE) {
noms <- noms %>%
mutate(name_detect_noms = str_replace_all(name_detect_noms, "[']", "[' ]"),
name_detect_noms = str_replace_all(name_detect_noms, "[aàáâãää]", "[aàáâãäå]"),
name_detect_noms = str_replace_all(name_detect_noms, "[eèéêë]", "[eèéêë]"),
name_detect_noms = str_replace_all(name_detect_noms, "[iìíîï]", "[iìíîï]"),
name_detect_noms = str_replace_all(name_detect_noms, "[oòóôõöø]", "[oòóôõöø]"),
name_detect_noms = str_replace_all(name_detect_noms, "[uùúûü]", "[uùúûü]"),
name_detect_noms = str_replace_all(name_detect_noms, "[yýÿ]", "[yýÿ]"),
name_detect_noms = str_replace_all(name_detect_noms, "[nñ]", "[nñ]"),
name_detect_noms = str_replace_all(name_detect_noms, "[cç]", "[cç]")) %>%
distinct(name_detect_noms)
}
# Dans le cas de rues en NL
# Voir: https://www.dbnl.org/tekst/stev002leid01_01/stev002leid01_01_0001.php
# PROBLEME RESTANT : il reste les rues avec possessif : sstraat - slaan - splein...
if (nl_street == TRUE) {
data_to_detect <- data_to_detect %>%
mutate(col_to_detect = str_replace(col_to_detect, "nieuwstraat\\b", ""),
col_to_detect = str_replace(col_to_detect, "straat\\b", ""),
col_to_detect = str_replace(col_to_detect, "laan\\b", ""),
col_to_detect = str_replace(col_to_detect, "plaats\\b", ""),
col_to_detect = str_replace(col_to_detect, "pleintje\\b", ""),
col_to_detect = str_replace(col_to_detect, "voorplein\\b", ""),
col_to_detect = str_replace(col_to_detect, "plein\\b", ""),
col_to_detect = str_replace(col_to_detect, "nieuwweg\\b", ""),
col_to_detect = str_replace(col_to_detect, "weg\\b", ""),
col_to_detect = str_replace(col_to_detect, "steenweg\\b", ""),
col_to_detect = str_replace(col_to_detect, "square\\b", ""),
col_to_detect = str_replace(col_to_detect, "dreef\\b", ""),
col_to_detect = str_replace(col_to_detect, "lei\\b", ""),
col_to_detect = str_replace(col_to_detect, "pad\\b", ""),
col_to_detect = str_replace(col_to_detect, "straatje\\b", ""),
col_to_detect = str_replace(col_to_detect, "steeg\\b", ""),
col_to_detect = str_replace(col_to_detect, "wegel\\b", ""),
col_to_detect = str_replace(col_to_detect, "dam\\b", ""),
col_to_detect = str_replace(col_to_detect, "kaai\\b", ""),
col_to_detect = str_replace(col_to_detect, "park\\b", ""),
col_to_detect = str_replace(col_to_detect, "dijk\\b", ""),
col_to_detect = str_replace(col_to_detect, "polder\\b", ""),
col_to_detect = str_replace(col_to_detect, "veld\\b", ""),
col_to_detect = str_replace(col_to_detect, "heide\\b", ""),
col_to_detect = str_replace(col_to_detect, "kerkhof\\b", ""),
col_to_detect = str_replace(col_to_detect, "hof\\b", ""),
col_to_detect = str_replace(col_to_detect, "steenstraat\\b", ""),
col_to_detect = str_replace(col_to_detect, "berg\\b", ""),
col_to_detect = str_replace(col_to_detect, "vest\\b", ""),
col_to_detect = str_replace(col_to_detect, "markt\\b", ""),
col_to_detect = str_replace(col_to_detect, "poort\\b", ""),
col_to_detect = str_replace(col_to_detect, "vliet\\b", ""),
col_to_detect = str_replace(col_to_detect, "dal\\b", ""),
col_to_detect = str_replace(col_to_detect, "bos\\b", ""),
col_to_detect = str_replace(col_to_detect, "tuin\\b", ""),
col_to_detect = str_replace(col_to_detect, "kerk\\b", ""),
col_to_detect = str_replace(col_to_detect, "hospitaal\\b", ""),
col_to_detect = str_replace(col_to_detect, "fontein\\b", ""),
col_to_detect = str_replace(col_to_detect, "hoef\\b", ""),
col_to_detect = str_replace(col_to_detect, "wijk\\b", ""),
col_to_detect = str_replace(col_to_detect, "baan\\b", ""),
col_to_detect = str_replace(col_to_detect, "abdij\\b", ""),
col_to_detect = str_replace(col_to_detect, "kruispunt\\b", ""),
col_to_detect = str_replace(col_to_detect, "gang\\b", "")
)
}
cat(paste0("\r", "\u2714", " Pr", "\u00e9", "paration des donn", "\u00e9", "es"))
# 2. Détection des noms -------------------------------------------------------------------------------------------------------------------
# --- FONCTIONS ---
# Détection de TOUS les noms avec respect des frontières de mots (\\b)
if (respect_boundaries == TRUE) {
extract_name_all <- function(v) {
str_extract_all(
v,
str_c(
"\\b(?<!\\-)(",
str_c(noms$name_detect_noms,
collapse = "|"
),
")\\b(?!\\-)"
)
)
}
# Détection du PREMIER nom avec respect des frontières de mots (\\b)
extract_name <- function(v) {
str_extract(
v,
str_c(
"\\b(?<!\\-)(",
str_c(noms$name_detect_noms,
collapse = "|"
),
")\\b(?!\\-)"
)
)
}
}
# Détection de TOUS les noms SANS respect des frontières de mots (le nom peut être au milieu d'une chaine de caractères plus longue)
if (respect_boundaries == FALSE) {
extract_name_all <- function(v) {
str_extract_all(
v,
str_c(
str_c(noms$name_detect_noms,
collapse = "|"
)
)
)
}
# Détection du PREMIER nom SANS respect des frontières de mots (le nom peut être au milieu d'une chaine de caractères plus longue)
extract_name <- function(v) {
str_extract(
v,
str_c(
str_c(noms$name_detect_noms,
collapse = "|"
)
)
)
}
}
cat(paste0("\n", "\u29D7", " D", "\u00e9", "tection des noms (extraction avec stringr sur base des noms belges)", "\033[K"))
data_to_detect <- data_to_detect %>%
mutate(
col_to_detect = str_replace_all(col_to_detect, "[-]", " "), # Pour supprimer les tirets, pour isoler les noms
name_extracted = extract_name_all(col_to_detect)
)
cat(paste0("\r", "\u2714", " D", "\u00e9", "tection des noms (extraction avec stringr sur base des noms belges)", "\033[K"))
# 3. Mise en forme des données ------------------------------------------------------------------------------------------------------------
cat(paste0("\n", "\u29D7", " Mise en forme du tableau"))
data_to_detect <- data_to_detect %>%
unnest_wider(name_extracted, names_sep="_") %>%
mutate(
across(
starts_with("name_extracted_"),
str_to_title
)
) %>%
select(-col_to_detect) #%>%
#    rowwise() %>% # Ici on crée une colonne résumée des noms détectées contenant un vecteur
#    mutate(
#      name_extracted_all = str_flatten(c_across(starts_with("name_extracted_")), collapse = ";", na.rm = TRUE)
#      ) %>%
#    ungroup()
cat(paste0("\r", "\u2714", " Mise en forme du tableau", "\033[K"))
# A FAIRE : redéployer name_extracted_all dans de nouvelles colonnes pour les remettre dans l'odre (name_extracted_1 peut être vide alors que name_extracted_2 non du fait des corrections avec "saint-"/"sint-")
return(data_to_detect)
}
checkhelper::print_globals()
paste("\u00e0")
x <- data.frame(nom = c(paste0("Avenue Paul H","\u00e9","ger"), "Jardin des Justes", "Place Sainte-Catherine"))
View(x)
"v\u00e2n"
noms <- load(file='data/noms.rda')
library(coleoptr)
noms
noms_65
checkhelper::print_globals()
checkhelper::print_globals()
library(coleoptr)
MG <- read_delim(
"Exemple/INAMI_22_individus_generalistes.csv",
delim = "~", escape_double = FALSE, trim_ws = TRUE)
MG <- read_delim(
"Exemple/INAMI_22_individus_generalistes.csv",
delim = "~", escape_double = FALSE, trim_ws = TRUE)
library(stringr)
library(readr)
MG <- read_delim(
"Exemple/INAMI_22_individus_generalistes.csv",
delim = "~", escape_double = FALSE, trim_ws = TRUE)
MG_gnd_exact <- name_be_genderize(
MG,
col_name = "prenom1",
reference = "all")
View(MG_gnd_exact)
library(coleoptr)
MG <- read_delim(
"Exemple/INAMI_22_individus_generalistes.csv",
delim = "~", escape_double = FALSE, trim_ws = TRUE)
### i) genderize exact ------
MG_gnd_exact <- name_be_genderize(
MG,
col_name = "prenom1",
reference = "all")
View(MG_gnd_exact)
View(MG_gnd_exact)
library(coleoptr)
MG <- read_delim(
"Exemple/INAMI_22_individus_generalistes.csv",
delim = "~", escape_double = FALSE, trim_ws = TRUE)
### i) genderize exact ------
MG_gnd_exact <- name_be_genderize(
MG,
col_name = "prenom1",
reference = "all")
View(MG_gnd_exact)
belgium_street <- read_csv2("belgium_street_abv_PREPROCESSED.csv") %>%
filter(is.na(nom_propre_abv)) %>%
group_by(street_id_phaco) %>%
mutate(double = n()) %>%
select(-nom_propre_abv, -mid_num, -mid_x_31370, -mid_y_31370, -mid_cd_sector) %>%
ungroup()
belgium_street_double <- belgium_street %>%
filter(double == 2) %>%
group_by(street_id_phaco) %>%
slice_sample(n = 1) %>%
ungroup()
belgium_street_unique <- belgium_street %>%
filter(double == 1)
belgium_street <- belgium_street_unique %>%
bind_rows(belgium_street_double) %>%
select(-double)
bxl_street <- belgium_street %>%
filter(postal_id %in% c(1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1020, 1030, 1031, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1060, 1070, 1080, 1081, 1082, 1083, 1090, 1100, 1105, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1212))
rm(belgium_street_double, belgium_street_unique)
belgium_street <- read_csv2("Exemple/belgium_street_abv_PREPROCESSED.csv") %>%
filter(is.na(nom_propre_abv)) %>%
group_by(street_id_phaco) %>%
mutate(double = n()) %>%
select(-nom_propre_abv, -mid_num, -mid_x_31370, -mid_y_31370, -mid_cd_sector) %>%
ungroup()
belgium_street_double <- belgium_street %>%
filter(double == 2) %>%
group_by(street_id_phaco) %>%
slice_sample(n = 1) %>%
ungroup()
belgium_street_unique <- belgium_street %>%
filter(double == 1)
belgium_street <- belgium_street_unique %>%
bind_rows(belgium_street_double) %>%
select(-double)
bxl_street <- belgium_street %>%
filter(postal_id %in% c(1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1020, 1030, 1031, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1060, 1070, 1080, 1081, 1082, 1083, 1090, 1100, 1105, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1212))
rm(belgium_street_double, belgium_street_unique)
library(dplyr)
belgium_street <- read_csv2("Exemple/belgium_street_abv_PREPROCESSED.csv") %>%
filter(is.na(nom_propre_abv)) %>%
group_by(street_id_phaco) %>%
mutate(double = n()) %>%
select(-nom_propre_abv, -mid_num, -mid_x_31370, -mid_y_31370, -mid_cd_sector) %>%
ungroup()
belgium_street_double <- belgium_street %>%
filter(double == 2) %>%
group_by(street_id_phaco) %>%
slice_sample(n = 1) %>%
ungroup()
belgium_street_unique <- belgium_street %>%
filter(double == 1)
belgium_street <- belgium_street_unique %>%
bind_rows(belgium_street_double) %>%
select(-double)
bxl_street <- belgium_street %>%
filter(postal_id %in% c(1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1020, 1030, 1031, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1060, 1070, 1080, 1081, 1082, 1083, 1090, 1100, 1105, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1212))
rm(belgium_street_double, belgium_street_unique)
rue_detect <- name_be_extract(
bxl_street,
col_to_detect = "street_FINAL_detected",
reference = "all",
numb_threshold = 0,
length_threshold = 0,
spec_char_insens = FALSE,
exclude_dico = c("fr", "nl"),
nl_street = TRUE)
rue_detect_gnd <- name_be_genderize(
rue_detect,
col_name = "name_extracted_1",
reference = "old")
freq(rue_detect_gnd$genre_detected)
library(questionr)
rue_detect <- name_be_extract(
bxl_street,
col_to_detect = "street_FINAL_detected",
reference = "all",
numb_threshold = 0,
length_threshold = 0,
spec_char_insens = FALSE,
exclude_dico = c("fr", "nl"),
nl_street = TRUE)
rue_detect_gnd <- name_be_genderize(
rue_detect,
col_name = "name_extracted_1",
reference = "old")
freq(rue_detect_gnd$genre_detected)
rue_detect <- name_be_extract(
bxl_street,
col_to_detect = "street_FINAL_detected",
reference = "old",
numb_threshold = 0,
length_threshold = 0,
spec_char_insens = FALSE,
exclude_dico = c("fr", "nl"),
nl_street = TRUE)
rue_detect_gnd <- name_be_genderize(
rue_detect,
col_name = "name_extracted_1",
reference = "old")
freq(rue_detect_gnd$genre_detected)
belgium_street_double <- belgium_street %>%
filter(double == 2) %>%
group_by(street_id_phaco) %>%
slice_sample(n = 1) %>%
ungroup()
rue_detect <- name_be_extract(
bxl_street,
col_to_detect = "street_FINAL_detected",
reference = "all",
numb_threshold = 0,
length_threshold = 0,
spec_char_insens = FALSE,
exclude_dico = c("fr", "nl"),
nl_street = TRUE)
rue_detect_gnd <- name_be_genderize(
rue_detect,
col_name = "name_extracted_1",
reference = "all")
freq(rue_detect_gnd$genre_detected)
rue_detect <- name_be_extract(
bxl_street,
col_to_detect = "street_FINAL_detected",
reference = "old",
numb_threshold = 0,
length_threshold = 0,
spec_char_insens = FALSE,
exclude_dico = c("fr", "nl"),
nl_street = TRUE)
rue_detect_gnd <- name_be_genderize(
rue_detect,
col_name = "name_extracted_1",
reference = "all")
freq(rue_detect_gnd$genre_detected)
MG_gnd_inexact <- name_be_genderize(
MG,
col_name = "prenom1",
reference = "all",
inexact = TRUE,
method_stringdist = "lcs",
error_max = 1)
freq(MG_gnd_inexact$genre_detected)
MG_gnd_inexact <- MG_gnd_inexact %>%
as_tibble() %>%
mutate(success = case_when(
sexe == 0 & genre_detected == "F" ~ TRUE,
sexe == 0 & genre_detected == "H" ~ FALSE,
sexe == 1 & genre_detected == "H" ~ TRUE,
sexe == 1 & genre_detected == "F" ~ FALSE,
genre_detected == "half_&_half" ~ FALSE
))
MG_gnd_inexact_verif <- MG_gnd_inexact %>%
select(prenom1, name_detected, n_f, n_h, prop_f, prop_h, genre_detected, success, dist_fuzzy)
freq(MG_gnd_inexact$success)
usethis::use_roxygen_md()
roxygen2md::roxygen2md()
usethis::use_readme_rmd()
noms
data("noms")
View(noms)
x <- data.frame(rue = c("Avenue Paul Héger",
"Jardin des Justes",
"Chemin Marie Popelin",
"Place Sainte-Catherine",
"Avenue Paul Dejaer",
"Rue de Molenbeek",
"Boulevard Léopold III",
"Avenue Sainte-Anne",
))
x <- data.frame(rue = c("Avenue Paul Héger",
"Jardin des Justes",
"Place Sainte-Catherine",
"Avenue Paul Dejaer",
"Rue de Molenbeek",
"Boulevard Léopold III",
"Avenue Sainte-Anne",
))
library(coleoptr)
